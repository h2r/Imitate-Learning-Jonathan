#!/usr/bin/python
import rospy
import itertools
#import ros_numpy
import message_filters
from std_msgs.msg import Int32, Float32
from baxter_core_msgs.msg import DigitalIOState, EndpointState, EndEffectorState
from sensor_msgs.msg import CompressedImage, Image, JointState
import numpy as np
import os
from scipy.misc import imshow
import cv2 
import time
import csv
import os
import sys

# Global Variables
# The first argument should be the task that we are doing
task = sys.argv[1]
if not os.path.exists('datas/' + task + '/'):
  os.mkdir('datas/' + task + '/')
save_folder=None
writer = None
text_file = None
is_recording = False
print(os.environ)
print(os.environ['ROS_MASTER_URI'])
class ApproxTimeSync(message_filters.ApproximateTimeSynchronizer):
  def add(self, msg, my_queue, my_queue_index=None):
        self.allow_headerless = True
        if hasattr(msg, 'timestamp'):
            stamp = msg.timestamp
        elif not hasattr(msg, 'header') or not hasattr(msg.header, 'stamp'):
            if not self.allow_headerless:
                rospy.logwarn("Cannot use message filters with non-stamped messages. "
                              "Use the 'allow_headerless' constructor option to "
                              "auto-assign ROS time to headerless messages.")
                return
            stamp = rospy.Time.now()
	else:
            stamp = msg.header.stamp
	
	#TODO ADD HEADER TO ALLOW HEADERLESS
	# http://book2code.com/ros_kinetic/source/ros_comm/message_filters/src/message_filters/__init__.y
        #setattr(msg, 'header', a)
        #msg.header.stamp = stamp
	#super(message_filters.ApproximateTimeSynchronizer, self).add(msg, my_queue)
        self.lock.acquire()
        my_queue[stamp] = msg
        while len(my_queue) > self.queue_size:
            del my_queue[min(my_queue)]
        # self.queues = [topic_0 {stamp: msg}, topic_1 {stamp: msg}, ...]
        if my_queue_index is None:
            search_queues = self.queues
        else:
            search_queues = self.queues[:my_queue_index] + \
                self.queues[my_queue_index+1:]
        # sort and leave only reasonable stamps for synchronization
        stamps = []
        for queue in search_queues:
            topic_stamps = []
            for s in queue:
                stamp_delta = abs(s - stamp)
                if stamp_delta > self.slop:
                    continue  # far over the slop
                topic_stamps.append((s, stamp_delta))
            if not topic_stamps:
                self.lock.release()
                return
            topic_stamps = sorted(topic_stamps, key=lambda x: x[1])
            stamps.append(topic_stamps)
        for vv in itertools.product(*[zip(*s)[0] for s in stamps]):
            vv = list(vv)
            # insert the new message
            if my_queue_index is not None:
                vv.insert(my_queue_index, stamp)
            qt = list(zip(self.queues, vv))
            if ( ((max(vv) - min(vv)) < self.slop) and
                (len([1 for q,t in qt if t not in q]) == 0) ):
                msgs = [q[t] for q,t in qt]
                self.signalMessage(*msgs)
                for q,t in qt:
                    del q[t]
                break  # fast finish after the synchronization
        self.lock.release()

def callback(arm, rgb, depth, gripper):
  curr_time = str(time.time())
  # We are toggling this global variable
  global is_recording
  global save_folder
  global writer
  if not is_recording:
   return
  rgb_dir = save_folder+"rgb/"
  depth_dir = save_folder+"depth/"
  if not os.path.exists(rgb_dir):
    os.mkdir(rgb_dir)
    os.mkdir(depth_dir)
  # arm = ['head_nod', 'head_pan', 'left_e0', 'left_e1', 'left_s0', 'left_s1', 'left_w0', 'left_w1', 'left_w2', 'right_e0', 'right_e1', 'right_s0', 'right_s1', 'right_w0', 'right_w1', 'right_w2', 'torso_t0']
  # joint_ang = joint.position
  # if len(joint_ang) < 17:
  #   return
  with open(rgb_dir + curr_time + '.jpg', 'w') as f:
    f.write(rgb.data)
  with open(depth_dir + curr_time + '.jpg', 'w') as f:
    f.write(depth.data)
  pose = arm.pose
  # end effector position
  posit = pose.position
  # end effector orientation
  orient = pose.orientation
  twist = arm.twist
  # linear velocity
  lin = twist.linear
  # angular velocity
  ang = twist.angular
  arr = [float(curr_time), posit.x, posit.y, posit.z]
  arr += [orient.w, orient.x, orient.y, orient.z]
  arr += [lin.x, lin.y, lin.z]
  arr += [ang.x, ang.y, ang.z]
  arr += [gripper.gripping]
  # Right arm joint angles
  #arr += [joint_ang[i] for i in range(9,16)] 
  if writer != None:
      writer.writerow(arr)
  else:
      print('WARNING: UNABLE TO WRITE DATA TO WRITER!') 

def start_recording(io):
    if not io.state:
        return
    if not is_recording:
        begin_record()
def begin_record():        
    global save_folder
    global task
    global is_recording
    global text_file
    global writer
    save_folder_tmp='datas/' + task + '/' + str(time.time()) + '/'
    os.mkdir(save_folder_tmp)
    save_folder = save_folder_tmp
    print('save folder changed: %s' % save_folder)
    text_file = open(save_folder + 'vectors.txt', 'w')
    writer = csv.writer(text_file)
    is_recording = True
    print('START')
def end_recording(io):
    if not io.state:
        return
    global is_recording
    global text_file
    if text_file != None:
        text_file.close()
        text_file = None
        print('File closed')
    is_recording=False
    print('STOP')


#TODO CONSIDER COMPRESSED IMAGES 
#joint_state_sub = message_filters.Subscriber('/robot/joint_states', JointState)
right_arm_state_sub = message_filters.Subscriber('/robot/limb/right/endpoint_state', EndpointState)
rgb_state_sub = message_filters.Subscriber('/kinect2/sd/image_color_rect/compressed', CompressedImage)
depth_state_sub = message_filters.Subscriber('/kinect2/sd/image_depth_rect/compressed', CompressedImage)
gripper_state_sub = message_filters.Subscriber('robot/end_effector/right_gripper/state', EndEffectorState)
#gripper_cache = message_filters.Cache(gripper_state_sub)
#mode_sub = message_filters.Subscriber('mode', Int32)
#penalty_sub = message_filters.Subscriber('penalty', Float32)

rospy.init_node('imitate_recorder', log_level=rospy.DEBUG)
#ts = message_filters.ApproximateTimeSynchronizer
ts = ApproxTimeSync([right_arm_state_sub, rgb_state_sub,  depth_state_sub, gripper_state_sub], 1, 0.1)
ts.registerCallback(callback)

# Toggle
start_button = message_filters.Subscriber('/robot/digital_io/right_lower_button/state', DigitalIOState)
end_button = message_filters.Subscriber('/robot/digital_io/right_upper_button/state', DigitalIOState)
start_button.registerCallback(start_recording)
end_button.registerCallback(end_recording)

print('Spinning')
rospy.spin()
